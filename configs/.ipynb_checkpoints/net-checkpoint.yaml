e1:
    # Conv1dNorm: [from, repeats, module, [out_ch, k_s, padding, stride]]  padding:-1==same
    # MaxPooling1d: [from, repeats, module, [k_s, padding, stride]]
    
  - [-1, 1, Conv1dNorm, [32, 3, -1, 1]]   # (32, 32, 25)
  - [-1, 1, MaxPooling, [2, 1, 2]]        # (32, 32, 13)
   
  - [-1, 1, Conv1dNorm, [64, 3, -1, 1]]   # (32, 64, 13)
  - [-1, 1, Conv1d, [32, 1, -1, 1]]       # (32, 32, 13)
  - [-2, 1, Conv1dNorm, [64, 3, -1, 1]]   # (32, 128, 13)
   
  - [-1, 1, MaxPooling, [2, 1, 2]]        # (32, 128, 7)
   
  - [-1, 1, Conv1dNorm, [128, 3, -1, 1]]  # (32, 128, 7)
  - [-1, 1, Conv1d, [64, 1, -1, 1]]       # (32, 64, 7)
  - [-2, 1, Conv1dNorm, [128, 3, -1, 1]]  # (32, 256, 7)

e2:
  - [-1, 1, Conv1dNorm, [64, 3, -1, 1]]   # (32, 64, 12)
  - [-1, 1, Conv1d,     [32, 1, -1, 1]]   # (32, 32, 12)
  - [-2, 1, Conv1dNorm, [64, 3, -1, 1]]   # (32, 128, 12)
  
  - [-1, 1, MaxPooling, [2, 1, 2]]        # (32, 128, 6)
  
  - [-1, 1, Conv1dNorm, [128, 3, -1, 1]]  # (32, 128, 6)
  - [-1, 1, Conv1d,     [64, 1, -1, 1]]   # (32, 64, 6)
  - [-2, 1, Conv1dNorm, [128, 3, -1, 1]]  # (32, 256, 6)
  

# att:
  # input: (32, 256, 13)
  # - []
